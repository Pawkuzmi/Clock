package zegar;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.Icon;

/**
 *
 * @author Pawe≈Ç
 */
public class Widget extends javax.swing.JDialog {

    
    
    public Widget(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();           // starting window dimension 351, 175; win dim with calendar 351, 500; 
        this.parent = parent;
        dataBase = new EventsDataBase();
        
        if(new GregorianCalendar().get(Calendar.DAY_OF_MONTH) == 1)
            dataBase.deleteEverything();
        
        setPosition();
              
        createDayLabels();
       
        myCalendar = new MyCalendar(labels, CalendarInternalFrame); 
        myCalendar.setupCalendar();         // starting calendar day-by-day view in extension
        
        myClock = new MyClock(dateTextField, hourTextField);
        
        myClock.start();
  
        disableUnusedLabels();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        extendButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        dateTextField = new javax.swing.JTextField();
        hourTextField = new javax.swing.JTextField();
        background = new javax.swing.JLabel();
        CalendarInternalFrame = new javax.swing.JInternalFrame();
        daysOfWeekPanel = new javax.swing.JPanel();
        mondayLabel = new javax.swing.JLabel();
        tuesdayLabel = new javax.swing.JLabel();
        wednesdayLabel = new javax.swing.JLabel();
        thursdayLabel = new javax.swing.JLabel();
        fridayLabel = new javax.swing.JLabel();
        saturdayLabel = new javax.swing.JLabel();
        sundayLabel = new javax.swing.JLabel();
        tilesPanel = new javax.swing.JPanel();
        backgroundInternal = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setLocation(new java.awt.Point(1000, 35));
        setMinimumSize(new java.awt.Dimension(345, 175));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(351, 175));
        setResizable(false);
        setSize(new java.awt.Dimension(351, 175));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        extendButton.setBackground(new java.awt.Color(102, 255, 102));
        extendButton.setForeground(new java.awt.Color(255, 51, 51));
        extendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazy/down.png")));
        //extendButton.setBorderPainted(true);

        //extendButton.setContentAreaFilled(false);
        extendButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        extendButton.setName("extendButton"); // NOI18N
        extendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                extendButtonMouseReleased(evt);
            }
        });
        getContentPane().add(extendButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 70, 17));

        exitButton.setToolTipText("Exit");
        exitButton.setBorderPainted(false);
        exitButton.setContentAreaFilled(false);
        exitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitButton.setName("exitButton"); // NOI18N
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exitButtonMouseReleased(evt);
            }
        });
        getContentPane().add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 2, 26, 26));

        dateTextField.setBackground(new java.awt.Color(0, 0, 0));
        dateTextField.setFont(new java.awt.Font("Digital-7", 0, 56)); // NOI18N
        dateTextField.setForeground(new java.awt.Color(51, 255, 0));
        dateTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dateTextField.setText("22.12.2022 pon");
        dateTextField.setBorder(null);
        dateTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dateTextField.setFocusable(false);
        getContentPane().add(dateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 310, 60));

        hourTextField.setBackground(new java.awt.Color(0, 0, 0));
        hourTextField.setFont(new java.awt.Font("Digital-7", 0, 56)); // NOI18N
        hourTextField.setForeground(new java.awt.Color(51, 255, 0));
        hourTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hourTextField.setBorder(null);
        hourTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hourTextField.setFocusable(false);
        getContentPane().add(hourTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 290, 60));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazy/zegar.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 352, 175));

        CalendarInternalFrame.setTitle("month");
        CalendarInternalFrame.setPreferredSize(new java.awt.Dimension(351, 329));
        CalendarInternalFrame.setVisible(true);
        CalendarInternalFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        daysOfWeekPanel.setLayout(new java.awt.GridLayout(1, 7, 22, 0));

        mondayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        mondayLabel.setText("Mon");
        daysOfWeekPanel.add(mondayLabel);

        tuesdayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        tuesdayLabel.setText("Tue");
        daysOfWeekPanel.add(tuesdayLabel);

        wednesdayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        wednesdayLabel.setText("Wed");
        daysOfWeekPanel.add(wednesdayLabel);

        thursdayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        thursdayLabel.setText("Thu");
        daysOfWeekPanel.add(thursdayLabel);

        fridayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        fridayLabel.setText("Fri");
        daysOfWeekPanel.add(fridayLabel);

        saturdayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        saturdayLabel.setText("Sat");
        daysOfWeekPanel.add(saturdayLabel);

        sundayLabel.setFont(new java.awt.Font("High Tower Text", 2, 14)); // NOI18N
        sundayLabel.setText("Sun");
        daysOfWeekPanel.add(sundayLabel);

        CalendarInternalFrame.getContentPane().add(daysOfWeekPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 5, -1, -1));

        tilesPanel.setOpaque(false);
        tilesPanel.setPreferredSize(new java.awt.Dimension(340, 270));
        tilesPanel.setLayout(new java.awt.GridLayout(5, 7));
        CalendarInternalFrame.getContentPane().add(tilesPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 24, -1, -1));
        CalendarInternalFrame.getContentPane().add(backgroundInternal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 25, 333, 267));

        getContentPane().add(CalendarInternalFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 175, -1, 325));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseReleased
        System.exit(0);
    }//GEN-LAST:event_exitButtonMouseReleased

    private void extendButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extendButtonMouseReleased
        if(!extendBool){
            
            this.setBounds((int)this.startPosX, (int)this.startPosY, 351, 500);
            
            extendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazy/up.png")));
            
            extendBool = true;
        }
        else {
            
            this.setBounds((int)this.startPosX, (int)this.startPosY, 351, 175);
            
            extendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazy/down.png")));
            
            extendBool = false;
        }
        
    }//GEN-LAST:event_extendButtonMouseReleased

        
    private void createDayLabels() {

        labels = new javax.swing.JLabel[35];
        
        for(int i = 0; i < labels.length; i++){
            labels[i] = new javax.swing.JLabel();
            
            labels[i].setFont(new java.awt.Font("High Tower Text", 3, 35));
            
            labels[i].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            labels[i].setVerticalAlignment(javax.swing.SwingConstants.TOP);

            labels[i].setMaximumSize(new java.awt.Dimension(48, 61));

            labels[i].setMinimumSize(new java.awt.Dimension(48, 61));

            labels[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazy/dayWithoutEvent.png")));

            labels[i].setIconTextGap(-39);
            
            labels[i].setName(""); // NOI18N

            labels[i].setPreferredSize(new java.awt.Dimension(48, 61));
            
            labels[i].addMouseListener(new MyListener());
            

            tilesPanel.add(labels[i]);
        }
    }
    
    private void disableUnusedLabels(){
        for(int i = 0; i < labels.length; i++){
            if(labels[i].getText().equals("")){
                labels[i].setEnabled(false);
            }
        }
    }

    private void setPosition() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        
        this.startPosX = screenSize.getWidth() - this.getSize().getWidth() - 30;
        this.startPosY = 30;
        
        this.setLocation((int) this.startPosX, (int) this.startPosY);
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Widget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Widget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Widget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Widget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Widget dialog = new Widget(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame CalendarInternalFrame;
    private javax.swing.JLabel background;
    private javax.swing.JLabel backgroundInternal;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JPanel daysOfWeekPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton extendButton;
    private javax.swing.JLabel fridayLabel;
    private javax.swing.JTextField hourTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel mondayLabel;
    private javax.swing.JLabel saturdayLabel;
    private javax.swing.JLabel sundayLabel;
    private javax.swing.JLabel thursdayLabel;
    private javax.swing.JPanel tilesPanel;
    private javax.swing.JLabel tuesdayLabel;
    private javax.swing.JLabel wednesdayLabel;
    // End of variables declaration//GEN-END:variables
    private boolean extendBool = false;
    private double startPosX, startPosY;
    
    private javax.swing.JLabel[] labels;
    private MyCalendar myCalendar;
    private Thread myClock;
    
    private Frame parent;
    
    private EventsDataBase dataBase;
    
    
    private class MyListener implements MouseListener{

        @Override
        public void mouseClicked(MouseEvent e) {
            if(e.getSource() == labels[7]){
                
                new ChoiceDialog(parent, true, dataBase, labels[7].getText());
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {
         //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseReleased(MouseEvent e) {
         //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseEntered(MouseEvent e) {
         //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseExited(MouseEvent e) {
          //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
        
    }
}
